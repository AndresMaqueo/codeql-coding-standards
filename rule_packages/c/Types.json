{
  "CERT-C": {
    "FLP32-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Prevent or detect domain and range errors in math functions",
          "precision": "very-high",
          "severity": "error",
          "short_name": "PreventOrDetectDomainAndRangeErrorsInMathFunctions",
          "tags": []
        }
      ],
      "title": "Prevent or detect domain and range errors in math functions"
    },
    "FLP34-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Ensure that floating-point conversions are within range of the new type",
          "precision": "very-high",
          "severity": "error",
          "short_name": "EnsureThatFloatingPointConversionsAreWithinRangeOf",
          "tags": []
        }
      ],
      "title": "Ensure that floating-point conversions are within range of the new type"
    },
    "FLP36-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Preserve precision when converting integral values to floating-point type",
          "precision": "very-high",
          "severity": "error",
          "short_name": "PreservePrecisionWhenConverting",
          "tags": []
        }
      ],
      "title": "Preserve precision when converting integral values to floating-point type"
    },
    "FLP37-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Do not use object representations to compare floating-point values",
          "precision": "very-high",
          "severity": "error",
          "short_name": "DoNotUseObjectRepresentations",
          "tags": []
        }
      ],
      "title": "Do not use object representations to compare floating-point values"
    },
    "INT30-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Ensure that unsigned integer operations do not wrap",
          "precision": "high",
          "severity": "error",
          "short_name": "EnsureThatUnsigne",
          "tags": []
        }
      ],
      "title": "Ensure that unsigned integer operations do not wrap"
    },
    "INT31-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Ensure that integer conversions do not result in lost or misinterpreted data",
          "precision": "high",
          "severity": "error",
          "short_name": "EnsureThatIntegerConversionsD",
          "tags": []
        }
      ],
      "title": "Ensure that integer conversions do not result in lost or misinterpreted data"
    },
    "INT32-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Ensure that operations on signed integers do not result in overflow",
          "precision": "high",
          "severity": "error",
          "short_name": "EnsureThatOperationsOnSignedInt",
          "tags": []
        }
      ],
      "title": "Ensure that operations on signed integers do not result in overflow"
    },
    "INT33-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Ensure that division and remainder operations do not result in divide-by-zero errors",
          "precision": "high",
          "severity": "error",
          "short_name": "EnsureThatDivisionAndRemainderO",
          "tags": []
        }
      ],
      "title": "Ensure that division and remainder operations do not result in divide-by-zero errors"
    },
    "INT34-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "Shifting an expression by an operand that is negative or of precision greater or equal to that or the another causes representational error.",
          "kind": "problem",
          "name": "Bit shift should not be done by a negative operand or an operand of greater-or-equal precision than that of another",
          "precision": "very-high",
          "severity": "error",
          "short_name": "ExprShiftedbyNegativeOrGreaterPrecisionOperand",
          "tags": []
        }
      ],
      "title": "Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand"
    },
    "INT35-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Use correct integer precisions",
          "precision": "high",
          "severity": "error",
          "short_name": "UseCorrectIntegerPrecisions",
          "tags": []
        }
      ],
      "title": "Use correct integer precisions"
    },
    "INT36-C": {
      "properties": {
        "obligation": "rule"
      },
      "queries": [
        {
          "description": "Converting between pointers and integers is not portable and might cause invalid memory access.",
          "kind": "problem",
          "name": "Do not convert pointers to integers and back",
          "precision": "very-high",
          "severity": "error",
          "short_name": "ConvertingAPointerToIntegerOrIntegerToPointer",
          "tags": []
        }
      ],
      "title": "Converting a pointer to integer or integer to pointer"
    }
  },
  "MISRA-C-2012": {
    "DIR-4-6": {
      "properties": {
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "Using plain numerical types over typedefs with explicit sign and bit counts may lead to confusion on how much bits are allocated for a value.",
          "kind": "problem",
          "name": "Do not use plain numerical types over typedefs named after their explicit bit layout",
          "precision": "high",
          "severity": "error",
          "short_name": "PlainNumericalTypeUsedOverExplicitTypedef",
          "tags": []
        }
      ],
      "title": "typedefs that indicate size and signedness should be used in place of the basic numerical types"
    },
    "RULE-10-1": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Operands shall not be of an inappropriate essential type",
          "precision": "high",
          "severity": "error",
          "short_name": "OperandsOfAnInappropriateEssentialType",
          "tags": []
        }
      ],
      "title": "Operands shall not be of an inappropriate essential type"
    },
    "RULE-10-2": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations.",
          "kind": "problem",
          "name": "Expressions of essentially character type shall not be used inappropriately in addition and",
          "precision": "very-high",
          "severity": "error",
          "short_name": "ExpressionsOfEssentiallyCharacterTypeUse",
          "tags": []
        }
      ],
      "title": "Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations"
    },
    "RULE-10-3": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.",
          "kind": "problem",
          "name": "The value of an expression shall not be assigned to an object with a narrower essential type or of a",
          "precision": "high",
          "severity": "error",
          "short_name": "ValueOfAnExpressionAssignedToAnObjectWit",
          "tags": []
        }
      ],
      "title": "The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category"
    },
    "RULE-10-4": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category.",
          "kind": "problem",
          "name": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the",
          "precision": "very-high",
          "severity": "error",
          "short_name": "BothOperandsOfAnOperatorInWhichT",
          "tags": []
        }
      ],
      "title": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category"
    },
    "RULE-10-5": {
      "properties": {
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "The value of an expression should not be cast to an inappropriate essential type",
          "precision": "very-high",
          "severity": "error",
          "short_name": "ValueOfAnExpressionShouldNotBe",
          "tags": []
        }
      ],
      "title": "The value of an expression should not be cast to an inappropriate essential type"
    },
    "RULE-10-6": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "The value of a composite expression shall not be assigned to an object with wider essential type",
          "precision": "very-high",
          "severity": "error",
          "short_name": "ValueOfACompositeExpressionA",
          "tags": []
        }
      ],
      "title": "The value of a composite expression shall not be assigned to an object with wider essential type"
    },
    "RULE-10-7": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type.",
          "kind": "problem",
          "name": "If a composite expression is used as one operand of an operator in which the usual arithmetic",
          "precision": "very-high",
          "severity": "error",
          "short_name": "IfACompositeExpressionIsUsedAsOneOperandO",
          "tags": []
        }
      ],
      "title": "If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type"
    },
    "RULE-10-8": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type.",
          "kind": "problem",
          "name": "The value of a composite expression shall not be cast to a different essential type category or a",
          "precision": "very-high",
          "severity": "error",
          "short_name": "ValueOfACompositeExpressionCastTo",
          "tags": []
        }
      ],
      "title": "The value of a composite expression shall not be cast to a different essential type category or a wider essential type"
    },
    "RULE-12-4": {
      "properties": {
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "Evaluation of constant expressions should not lead to unsigned integer wrap-around",
          "precision": "very-high",
          "severity": "error",
          "short_name": "EvaluationOfConstantExpres",
          "tags": []
        }
      ],
      "title": "Evaluation of constant expressions should not lead to unsigned integer wrap-around"
    },
    "RULE-12-5": {
      "properties": {
        "obligation": "mandatory"
      },
      "queries": [
        {
          "description": "Using sizeof operator on an array type function parameter leads to unintended results.",
          "kind": "problem",
          "name": "The sizeof operator should not be used on an array type function parameter",
          "precision": "very-high",
          "severity": "error",
          "short_name": "SizeofOperatorUsedOnArrayTypeParam",
          "tags": []
        }
      ],
      "title": "The sizeof operator shall not have an operand which is a function parameter declared as 'array of type'"
    },
    "RULE-14-1": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "A loop counter shall not have essentially floating type",
          "precision": "high",
          "severity": "error",
          "short_name": "LoopCounterHaveEssentiallyFloatingType",
          "tags": []
        }
      ],
      "title": "A loop counter shall not have essentially floating type"
    },
    "RULE-21-13": {
      "properties": {
        "obligation": "mandatory"
      },
      "queries": [
        {
          "description": "Any value passed to a function in <ctype.h> shall be representable as an unsigned char or be the value EOF.",
          "kind": "problem",
          "name": "Any value passed to a function in <ctype.h> shall be representable as an unsigned char or be the",
          "precision": "very-high",
          "severity": "error",
          "short_name": "ValuePassedToAFunctionInCtypehN",
          "tags": []
        }
      ],
      "title": "Any value passed to a function in <ctype.h> shall be representable as an unsigned char or be the value EOF"
    },
    "RULE-21-14": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "TODO.",
          "kind": "problem",
          "name": "The Standard Library function memcmp shall not be used to compare null terminated strings",
          "precision": "high",
          "severity": "error",
          "short_name": "StandardLibraryFunctionMemcmp",
          "tags": []
        }
      ],
      "title": "The Standard Library function memcmp shall not be used to compare null terminated strings"
    },
    "RULE-21-15": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types.",
          "kind": "problem",
          "name": "The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers",
          "precision": "very-high",
          "severity": "error",
          "short_name": "PointerArgumentsToTheStandardLibraryFunctionsM",
          "tags": []
        }
      ],
      "title": "The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types"
    },
    "RULE-21-16": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type.",
          "kind": "problem",
          "name": "The pointer arguments to the Standard Library function memcmp shall point to either a pointer type,",
          "precision": "very-high",
          "severity": "error",
          "short_name": "PointerArgumentsToTheStandardLibraryFunctionM",
          "tags": []
        }
      ],
      "title": "The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type"
    },
    "RULE-7-4": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Assigning string literal to a variable with type other than a pointer to const char and modifying it causes undefined behavior .",
          "kind": "problem",
          "name": "A string literal shall only be assigned to a pointer to const char",
          "precision": "very-high",
          "severity": "error",
          "short_name": "StringLiteralAssignedToNonConstChar",
          "tags": []
        }
      ],
      "title": "A string literal shall not be assigned to an object unless the object's type is 'pointer to const-qualified char'"
    }
  }
}