//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype ImportMisra23Query =
  TUserCopyAndMoveAssignmentShallHandleSelfAssignmentQuery() or
  TSectionsOfCodeShouldNotBeCommentedOutQuery() or
  TDeclarationShouldNotDeclareMoreThanOneVariableQuery() or
  TEnumerationNotDefinedWithAnExplicitUnderlyingTypeQuery() or
  TAsmDeclarationShallNotBeUsedQuery() or
  TDeclarationOfAnObjectIndirectionsLevelQuery() or
  TValueOfAnEnumerationConstantNotUniqueQuery() or
  TBitFieldShallHaveAnAppropriateTypeQuery() or
  TSignedIntegerBitFieldHaveALengthOfOneBitQuery() or
  TVirtualAndNonVirtualBaseClassInHierarchyQuery() or
  TDifferentDefaultArgsInOverridingVirtualFunctionQuery() or
  TDeclarationsOrOverridesParamsAreUnnamedOrIdenticalQuery() or
  TComparisonOfVirtualPointerOnlyBeWithNullptrQuery() or
  TDynamicTypeUsedWithinConstructorOrDestructorQuery() or
  TConstructorsShouldInitializeAllBaseClassesQuery() or
  TInitializerListConstructorIsTheOnlyConstructorQuery() or
  TAddressOfOperatorOverloadedQuery() or
  TFunctionTemplatesExplicitlySpecializedQuery() or
  TExceptionObjectHavePointerTypeQuery() or
  TEmptyThrowShallOnlyOccurWithinACatchHandlerQuery() or
  THandlersReferToNonStaticMembersFromTheirClassQuery() or
  TNoexceptFunctionShouldNotPropagateAnExceptionQuery() or
  TFunctionLikeMacrosDefinedQuery() or
  TIncludeDirectivesPrecededByPreprocessorDirectivesQuery() or
  TIdentifiersUsedInTheControllingExpressionOfQuery() or
  TCharsThatShouldNotOccurInHeaderFileNameQuery() or
  TAndPreprocessorOperatorsShouldNotBeUsedQuery() or
  TMacroParameterFollowingAHashOperatorQuery() or
  TArgumentToAMixedUseMacroShoulNotNeedExpansionQuery() or
  TTokensThatLookLikeDirectivesInAMacroArgumentQuery() or
  TFacilitiesProvidedByCsignalUsedQuery() or
  TAtofAtoiAtolAndAtollFromCstdlibUsedQuery() or
  TMacroOffsetShouldNotBeUsedQuery() or
  TDefineBothSizedAndUnsizedVersionOfAGlobalOperatorQuery() or
  TPointerToAnIncompleteClassTypeDeletedQuery() or
  TPointersReturnedByLocaleFunctionsMustBeUsedAsConstQuery() or
  TCallToSetlocaleInvalidatesOldPointersMisraQuery() or
  TCallToSetlocaleInvalidatesOldPointersWarnMisraQuery() or
  TVectorShouldNotBeSpecializedWithBoolQuery() or
  TForwardingReferencesAndForwardNotUsedTogetherQuery() or
  TObjectUsedWhileInPotentiallyMovedFromStateQuery() or
  TCLibraryInputoutputFunctionsUsedQuery() or
  TReadsAndWritesOnStreamNotSeparatedByPositioningQuery() or
  TOperationsOnMemoryNotSequencedAppropriatelyQuery() or
  TCharacterOnlyInEscapeSequenceOrUniversalCharNameQuery() or
  TEscapeSequencesAndUniversalCharNamesNotTerminatedQuery() or
  TOctalConstantsUsedQuery() or
  TUnsignedIntegerLiteralsNotAppropriatelySuffixedQuery() or
  TLowercaseLUsedAsFirstCharacterInLiteralSuffixQuery() or
  TCharacterSequenceUsedWithinACStyleCommentQuery() or
  TLineSplicingUsedInCommentsQuery() or
  TGlobalDeclarationsOnlyMainNamespaceOrExternCQuery() or
  TMainUsedOnlyForTheGlobalFunctionMainQuery() or
  TOneDefinitionRuleViolatedQuery() or
  TVariableDeclaredInInnerScopeHidesOuterScopeQuery() or
  TDerivedClasseConcealFunctionInheritedFromTheBaseQuery() or
  TNameInDependentBaseResolvedByUnqualifiedLookupQuery() or
  TObjectAccessedBeforeLifetimeMisraQuery() or
  TObjectAccessedAfterLifetimeMisraQuery() or
  TMustNotReturnReferenceToLocalAutomaticVariableQuery() or
  TNullptrNotTheOnlyFormOfTheNullPointerConstantQuery() or
  TArrayPassedAsFunctionArgumentDecayToAPointerQuery() or
  TResultOfAnAssignmentOperatorShouldNotBeUsedQuery() or
  TCommaOperatorShouldNotBeUsedQuery() or
  TFunctionsCallThemselvesEitherDirectlyOrIndirectlyQuery() or
  TCastRemovesConstOrVolatileFromPointerOrReferenceQuery() or
  TCastsBetweenAPointerToFunctionAndAnyOtherTypeQuery() or
  TReinterpretCastShallNotBeUsedQuery() or
  TUnsignedOperationWithConstantOperandsShouldNotWrapQuery() or
  TBuiltInOperatorAppliedToUnsignedExpressionQuery() or
  TBodyOfIterationOrSelectionStatementNotCompoundQuery() or
  TIfElseIfEndConditionQuery() or
  TGotoStatementShouldNotBeUsedQuery() or
  TGotoShallReferenceALabelInSurroundingBlockQuery() or
  TGotoShallJumpToLabelDeclaredLaterInTheFunctionQuery() or
  TFunctionDeclaredWithTheNoreturnAttributeReturnQuery() or
  TNonVoidFunctionShallReturnAValueOnAllPathsQuery()

predicate isImportMisra23QueryMetadata(Query query, string queryId, string ruleId, string category) {
  query =
    // `Query` instance for the `userCopyAndMoveAssignmentShallHandleSelfAssignment` query
    ImportMisra23Package::userCopyAndMoveAssignmentShallHandleSelfAssignmentQuery() and
  queryId =
    // `@id` for the `userCopyAndMoveAssignmentShallHandleSelfAssignment` query
    "cpp/misra/user-copy-and-move-assignment-shall-handle-self-assignment" and
  ruleId = "DIR-15-8-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `sectionsOfCodeShouldNotBeCommentedOut` query
    ImportMisra23Package::sectionsOfCodeShouldNotBeCommentedOutQuery() and
  queryId =
    // `@id` for the `sectionsOfCodeShouldNotBeCommentedOut` query
    "cpp/misra/sections-of-code-should-not-be-commented-out" and
  ruleId = "DIR-5-7-2" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `declarationShouldNotDeclareMoreThanOneVariable` query
    ImportMisra23Package::declarationShouldNotDeclareMoreThanOneVariableQuery() and
  queryId =
    // `@id` for the `declarationShouldNotDeclareMoreThanOneVariable` query
    "cpp/misra/declaration-should-not-declare-more-than-one-variable" and
  ruleId = "RULE-10-0-1" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `enumerationNotDefinedWithAnExplicitUnderlyingType` query
    ImportMisra23Package::enumerationNotDefinedWithAnExplicitUnderlyingTypeQuery() and
  queryId =
    // `@id` for the `enumerationNotDefinedWithAnExplicitUnderlyingType` query
    "cpp/misra/enumeration-not-defined-with-an-explicit-underlying-type" and
  ruleId = "RULE-10-2-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `asmDeclarationShallNotBeUsed` query
    ImportMisra23Package::asmDeclarationShallNotBeUsedQuery() and
  queryId =
    // `@id` for the `asmDeclarationShallNotBeUsed` query
    "cpp/misra/asm-declaration-shall-not-be-used" and
  ruleId = "RULE-10-4-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `declarationOfAnObjectIndirectionsLevel` query
    ImportMisra23Package::declarationOfAnObjectIndirectionsLevelQuery() and
  queryId =
    // `@id` for the `declarationOfAnObjectIndirectionsLevel` query
    "cpp/misra/declaration-of-an-object-indirections-level" and
  ruleId = "RULE-11-3-2" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `valueOfAnEnumerationConstantNotUnique` query
    ImportMisra23Package::valueOfAnEnumerationConstantNotUniqueQuery() and
  queryId =
    // `@id` for the `valueOfAnEnumerationConstantNotUnique` query
    "cpp/misra/value-of-an-enumeration-constant-not-unique" and
  ruleId = "RULE-11-6-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `bitFieldShallHaveAnAppropriateType` query
    ImportMisra23Package::bitFieldShallHaveAnAppropriateTypeQuery() and
  queryId =
    // `@id` for the `bitFieldShallHaveAnAppropriateType` query
    "cpp/misra/bit-field-shall-have-an-appropriate-type" and
  ruleId = "RULE-12-2-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `signedIntegerBitFieldHaveALengthOfOneBit` query
    ImportMisra23Package::signedIntegerBitFieldHaveALengthOfOneBitQuery() and
  queryId =
    // `@id` for the `signedIntegerBitFieldHaveALengthOfOneBit` query
    "cpp/misra/signed-integer-bit-field-have-a-length-of-one-bit" and
  ruleId = "RULE-12-2-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `virtualAndNonVirtualBaseClassInHierarchy` query
    ImportMisra23Package::virtualAndNonVirtualBaseClassInHierarchyQuery() and
  queryId =
    // `@id` for the `virtualAndNonVirtualBaseClassInHierarchy` query
    "cpp/misra/virtual-and-non-virtual-base-class-in-hierarchy" and
  ruleId = "RULE-13-1-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `differentDefaultArgsInOverridingVirtualFunction` query
    ImportMisra23Package::differentDefaultArgsInOverridingVirtualFunctionQuery() and
  queryId =
    // `@id` for the `differentDefaultArgsInOverridingVirtualFunction` query
    "cpp/misra/different-default-args-in-overriding-virtual-function" and
  ruleId = "RULE-13-3-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `declarationsOrOverridesParamsAreUnnamedOrIdentical` query
    ImportMisra23Package::declarationsOrOverridesParamsAreUnnamedOrIdenticalQuery() and
  queryId =
    // `@id` for the `declarationsOrOverridesParamsAreUnnamedOrIdentical` query
    "cpp/misra/declarations-or-overrides-params-are-unnamed-or-identical" and
  ruleId = "RULE-13-3-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `comparisonOfVirtualPointerOnlyBeWithNullptr` query
    ImportMisra23Package::comparisonOfVirtualPointerOnlyBeWithNullptrQuery() and
  queryId =
    // `@id` for the `comparisonOfVirtualPointerOnlyBeWithNullptr` query
    "cpp/misra/comparison-of-virtual-pointer-only-be-with-nullptr" and
  ruleId = "RULE-13-3-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `dynamicTypeUsedWithinConstructorOrDestructor` query
    ImportMisra23Package::dynamicTypeUsedWithinConstructorOrDestructorQuery() and
  queryId =
    // `@id` for the `dynamicTypeUsedWithinConstructorOrDestructor` query
    "cpp/misra/dynamic-type-used-within-constructor-or-destructor" and
  ruleId = "RULE-15-1-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `constructorsShouldInitializeAllBaseClasses` query
    ImportMisra23Package::constructorsShouldInitializeAllBaseClassesQuery() and
  queryId =
    // `@id` for the `constructorsShouldInitializeAllBaseClasses` query
    "cpp/misra/constructors-should-initialize-all-base-classes" and
  ruleId = "RULE-15-1-2" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `initializerListConstructorIsTheOnlyConstructor` query
    ImportMisra23Package::initializerListConstructorIsTheOnlyConstructorQuery() and
  queryId =
    // `@id` for the `initializerListConstructorIsTheOnlyConstructor` query
    "cpp/misra/initializer-list-constructor-is-the-only-constructor" and
  ruleId = "RULE-15-1-5" and
  category = "required"
  or
  query =
    // `Query` instance for the `addressOfOperatorOverloaded` query
    ImportMisra23Package::addressOfOperatorOverloadedQuery() and
  queryId =
    // `@id` for the `addressOfOperatorOverloaded` query
    "cpp/misra/address-of-operator-overloaded" and
  ruleId = "RULE-16-5-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `functionTemplatesExplicitlySpecialized` query
    ImportMisra23Package::functionTemplatesExplicitlySpecializedQuery() and
  queryId =
    // `@id` for the `functionTemplatesExplicitlySpecialized` query
    "cpp/misra/function-templates-explicitly-specialized" and
  ruleId = "RULE-17-8-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `exceptionObjectHavePointerType` query
    ImportMisra23Package::exceptionObjectHavePointerTypeQuery() and
  queryId =
    // `@id` for the `exceptionObjectHavePointerType` query
    "cpp/misra/exception-object-have-pointer-type" and
  ruleId = "RULE-18-1-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `emptyThrowShallOnlyOccurWithinACatchHandler` query
    ImportMisra23Package::emptyThrowShallOnlyOccurWithinACatchHandlerQuery() and
  queryId =
    // `@id` for the `emptyThrowShallOnlyOccurWithinACatchHandler` query
    "cpp/misra/empty-throw-shall-only-occur-within-a-catch-handler" and
  ruleId = "RULE-18-1-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `handlersReferToNonStaticMembersFromTheirClass` query
    ImportMisra23Package::handlersReferToNonStaticMembersFromTheirClassQuery() and
  queryId =
    // `@id` for the `handlersReferToNonStaticMembersFromTheirClass` query
    "cpp/misra/handlers-refer-to-non-static-members-from-their-class" and
  ruleId = "RULE-18-3-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `noexceptFunctionShouldNotPropagateAnException` query
    ImportMisra23Package::noexceptFunctionShouldNotPropagateAnExceptionQuery() and
  queryId =
    // `@id` for the `noexceptFunctionShouldNotPropagateAnException` query
    "cpp/misra/noexcept-function-should-not-propagate-an-exception" and
  ruleId = "RULE-18-5-1" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `functionLikeMacrosDefined` query
    ImportMisra23Package::functionLikeMacrosDefinedQuery() and
  queryId =
    // `@id` for the `functionLikeMacrosDefined` query
    "cpp/misra/function-like-macros-defined" and
  ruleId = "RULE-19-0-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `includeDirectivesPrecededByPreprocessorDirectives` query
    ImportMisra23Package::includeDirectivesPrecededByPreprocessorDirectivesQuery() and
  queryId =
    // `@id` for the `includeDirectivesPrecededByPreprocessorDirectives` query
    "cpp/misra/include-directives-preceded-by-preprocessor-directives" and
  ruleId = "RULE-19-0-3" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `identifiersUsedInTheControllingExpressionOf` query
    ImportMisra23Package::identifiersUsedInTheControllingExpressionOfQuery() and
  queryId =
    // `@id` for the `identifiersUsedInTheControllingExpressionOf` query
    "cpp/misra/identifiers-used-in-the-controlling-expression-of" and
  ruleId = "RULE-19-1-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `charsThatShouldNotOccurInHeaderFileName` query
    ImportMisra23Package::charsThatShouldNotOccurInHeaderFileNameQuery() and
  queryId =
    // `@id` for the `charsThatShouldNotOccurInHeaderFileName` query
    "cpp/misra/chars-that-should-not-occur-in-header-file-name" and
  ruleId = "RULE-19-2-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `andPreprocessorOperatorsShouldNotBeUsed` query
    ImportMisra23Package::andPreprocessorOperatorsShouldNotBeUsedQuery() and
  queryId =
    // `@id` for the `andPreprocessorOperatorsShouldNotBeUsed` query
    "cpp/misra/and-preprocessor-operators-should-not-be-used" and
  ruleId = "RULE-19-3-1" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `macroParameterFollowingAHashOperator` query
    ImportMisra23Package::macroParameterFollowingAHashOperatorQuery() and
  queryId =
    // `@id` for the `macroParameterFollowingAHashOperator` query
    "cpp/misra/macro-parameter-following-a-hash-operator" and
  ruleId = "RULE-19-3-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `argumentToAMixedUseMacroShoulNotNeedExpansion` query
    ImportMisra23Package::argumentToAMixedUseMacroShoulNotNeedExpansionQuery() and
  queryId =
    // `@id` for the `argumentToAMixedUseMacroShoulNotNeedExpansion` query
    "cpp/misra/argument-to-a-mixed-use-macro-shoul-not-need-expansion" and
  ruleId = "RULE-19-3-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `tokensThatLookLikeDirectivesInAMacroArgument` query
    ImportMisra23Package::tokensThatLookLikeDirectivesInAMacroArgumentQuery() and
  queryId =
    // `@id` for the `tokensThatLookLikeDirectivesInAMacroArgument` query
    "cpp/misra/tokens-that-look-like-directives-in-a-macro-argument" and
  ruleId = "RULE-19-3-5" and
  category = "required"
  or
  query =
    // `Query` instance for the `facilitiesProvidedByCsignalUsed` query
    ImportMisra23Package::facilitiesProvidedByCsignalUsedQuery() and
  queryId =
    // `@id` for the `facilitiesProvidedByCsignalUsed` query
    "cpp/misra/facilities-provided-by-csignal-used" and
  ruleId = "RULE-21-10-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `atofAtoiAtolAndAtollFromCstdlibUsed` query
    ImportMisra23Package::atofAtoiAtolAndAtollFromCstdlibUsedQuery() and
  queryId =
    // `@id` for the `atofAtoiAtolAndAtollFromCstdlibUsed` query
    "cpp/misra/atof-atoi-atol-and-atoll-from-cstdlib-used" and
  ruleId = "RULE-21-2-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `macroOffsetShouldNotBeUsed` query
    ImportMisra23Package::macroOffsetShouldNotBeUsedQuery() and
  queryId =
    // `@id` for the `macroOffsetShouldNotBeUsed` query
    "cpp/misra/macro-offset-should-not-be-used" and
  ruleId = "RULE-21-2-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `defineBothSizedAndUnsizedVersionOfAGlobalOperator` query
    ImportMisra23Package::defineBothSizedAndUnsizedVersionOfAGlobalOperatorQuery() and
  queryId =
    // `@id` for the `defineBothSizedAndUnsizedVersionOfAGlobalOperator` query
    "cpp/misra/define-both-sized-and-unsized-version-of-a-global-operator" and
  ruleId = "RULE-21-6-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `pointerToAnIncompleteClassTypeDeleted` query
    ImportMisra23Package::pointerToAnIncompleteClassTypeDeletedQuery() and
  queryId =
    // `@id` for the `pointerToAnIncompleteClassTypeDeleted` query
    "cpp/misra/pointer-to-an-incomplete-class-type-deleted" and
  ruleId = "RULE-21-6-5" and
  category = "required"
  or
  query =
    // `Query` instance for the `pointersReturnedByLocaleFunctionsMustBeUsedAsConst` query
    ImportMisra23Package::pointersReturnedByLocaleFunctionsMustBeUsedAsConstQuery() and
  queryId =
    // `@id` for the `pointersReturnedByLocaleFunctionsMustBeUsedAsConst` query
    "cpp/misra/pointers-returned-by-locale-functions-must-be-used-as-const" and
  ruleId = "RULE-25-5-2" and
  category = "mandatory"
  or
  query =
    // `Query` instance for the `callToSetlocaleInvalidatesOldPointersMisra` query
    ImportMisra23Package::callToSetlocaleInvalidatesOldPointersMisraQuery() and
  queryId =
    // `@id` for the `callToSetlocaleInvalidatesOldPointersMisra` query
    "cpp/misra/call-to-setlocale-invalidates-old-pointers-misra" and
  ruleId = "RULE-25-5-3" and
  category = "mandatory"
  or
  query =
    // `Query` instance for the `callToSetlocaleInvalidatesOldPointersWarnMisra` query
    ImportMisra23Package::callToSetlocaleInvalidatesOldPointersWarnMisraQuery() and
  queryId =
    // `@id` for the `callToSetlocaleInvalidatesOldPointersWarnMisra` query
    "cpp/misra/call-to-setlocale-invalidates-old-pointers-warn-misra" and
  ruleId = "RULE-25-5-3" and
  category = "mandatory"
  or
  query =
    // `Query` instance for the `vectorShouldNotBeSpecializedWithBool` query
    ImportMisra23Package::vectorShouldNotBeSpecializedWithBoolQuery() and
  queryId =
    // `@id` for the `vectorShouldNotBeSpecializedWithBool` query
    "cpp/misra/vector-should-not-be-specialized-with-bool" and
  ruleId = "RULE-26-3-1" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `forwardingReferencesAndForwardNotUsedTogether` query
    ImportMisra23Package::forwardingReferencesAndForwardNotUsedTogetherQuery() and
  queryId =
    // `@id` for the `forwardingReferencesAndForwardNotUsedTogether` query
    "cpp/misra/forwarding-references-and-forward-not-used-together" and
  ruleId = "RULE-28-6-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `objectUsedWhileInPotentiallyMovedFromState` query
    ImportMisra23Package::objectUsedWhileInPotentiallyMovedFromStateQuery() and
  queryId =
    // `@id` for the `objectUsedWhileInPotentiallyMovedFromState` query
    "cpp/misra/object-used-while-in-potentially-moved-from-state" and
  ruleId = "RULE-28-6-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `cLibraryInputoutputFunctionsUsed` query
    ImportMisra23Package::cLibraryInputoutputFunctionsUsedQuery() and
  queryId =
    // `@id` for the `cLibraryInputoutputFunctionsUsed` query
    "cpp/misra/c-library-inputoutput-functions-used" and
  ruleId = "RULE-30-0-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `readsAndWritesOnStreamNotSeparatedByPositioning` query
    ImportMisra23Package::readsAndWritesOnStreamNotSeparatedByPositioningQuery() and
  queryId =
    // `@id` for the `readsAndWritesOnStreamNotSeparatedByPositioning` query
    "cpp/misra/reads-and-writes-on-stream-not-separated-by-positioning" and
  ruleId = "RULE-30-0-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `operationsOnMemoryNotSequencedAppropriately` query
    ImportMisra23Package::operationsOnMemoryNotSequencedAppropriatelyQuery() and
  queryId =
    // `@id` for the `operationsOnMemoryNotSequencedAppropriately` query
    "cpp/misra/operations-on-memory-not-sequenced-appropriately" and
  ruleId = "RULE-4-6-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `characterOnlyInEscapeSequenceOrUniversalCharName` query
    ImportMisra23Package::characterOnlyInEscapeSequenceOrUniversalCharNameQuery() and
  queryId =
    // `@id` for the `characterOnlyInEscapeSequenceOrUniversalCharName` query
    "cpp/misra/character-only-in-escape-sequence-or-universal-char-name" and
  ruleId = "RULE-5-13-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `escapeSequencesAndUniversalCharNamesNotTerminated` query
    ImportMisra23Package::escapeSequencesAndUniversalCharNamesNotTerminatedQuery() and
  queryId =
    // `@id` for the `escapeSequencesAndUniversalCharNamesNotTerminated` query
    "cpp/misra/escape-sequences-and-universal-char-names-not-terminated" and
  ruleId = "RULE-5-13-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `octalConstantsUsed` query
    ImportMisra23Package::octalConstantsUsedQuery() and
  queryId =
    // `@id` for the `octalConstantsUsed` query
    "cpp/misra/octal-constants-used" and
  ruleId = "RULE-5-13-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `unsignedIntegerLiteralsNotAppropriatelySuffixed` query
    ImportMisra23Package::unsignedIntegerLiteralsNotAppropriatelySuffixedQuery() and
  queryId =
    // `@id` for the `unsignedIntegerLiteralsNotAppropriatelySuffixed` query
    "cpp/misra/unsigned-integer-literals-not-appropriately-suffixed" and
  ruleId = "RULE-5-13-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `lowercaseLUsedAsFirstCharacterInLiteralSuffix` query
    ImportMisra23Package::lowercaseLUsedAsFirstCharacterInLiteralSuffixQuery() and
  queryId =
    // `@id` for the `lowercaseLUsedAsFirstCharacterInLiteralSuffix` query
    "cpp/misra/lowercase-l-used-as-first-character-in-literal-suffix" and
  ruleId = "RULE-5-13-5" and
  category = "required"
  or
  query =
    // `Query` instance for the `characterSequenceUsedWithinACStyleComment` query
    ImportMisra23Package::characterSequenceUsedWithinACStyleCommentQuery() and
  queryId =
    // `@id` for the `characterSequenceUsedWithinACStyleComment` query
    "cpp/misra/character-sequence-used-within-ac-style-comment" and
  ruleId = "RULE-5-7-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `lineSplicingUsedInComments` query
    ImportMisra23Package::lineSplicingUsedInCommentsQuery() and
  queryId =
    // `@id` for the `lineSplicingUsedInComments` query
    "cpp/misra/line-splicing-used-in-comments" and
  ruleId = "RULE-5-7-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `globalDeclarationsOnlyMainNamespaceOrExternC` query
    ImportMisra23Package::globalDeclarationsOnlyMainNamespaceOrExternCQuery() and
  queryId =
    // `@id` for the `globalDeclarationsOnlyMainNamespaceOrExternC` query
    "cpp/misra/global-declarations-only-main-namespace-or-extern-c" and
  ruleId = "RULE-6-0-3" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `mainUsedOnlyForTheGlobalFunctionMain` query
    ImportMisra23Package::mainUsedOnlyForTheGlobalFunctionMainQuery() and
  queryId =
    // `@id` for the `mainUsedOnlyForTheGlobalFunctionMain` query
    "cpp/misra/main-used-only-for-the-global-function-main" and
  ruleId = "RULE-6-0-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `oneDefinitionRuleViolated` query
    ImportMisra23Package::oneDefinitionRuleViolatedQuery() and
  queryId =
    // `@id` for the `oneDefinitionRuleViolated` query
    "cpp/misra/one-definition-rule-violated" and
  ruleId = "RULE-6-2-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `variableDeclaredInInnerScopeHidesOuterScope` query
    ImportMisra23Package::variableDeclaredInInnerScopeHidesOuterScopeQuery() and
  queryId =
    // `@id` for the `variableDeclaredInInnerScopeHidesOuterScope` query
    "cpp/misra/variable-declared-in-inner-scope-hides-outer-scope" and
  ruleId = "RULE-6-4-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `derivedClasseConcealFunctionInheritedFromTheBase` query
    ImportMisra23Package::derivedClasseConcealFunctionInheritedFromTheBaseQuery() and
  queryId =
    // `@id` for the `derivedClasseConcealFunctionInheritedFromTheBase` query
    "cpp/misra/derived-classe-conceal-function-inherited-from-the-base" and
  ruleId = "RULE-6-4-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `nameInDependentBaseResolvedByUnqualifiedLookup` query
    ImportMisra23Package::nameInDependentBaseResolvedByUnqualifiedLookupQuery() and
  queryId =
    // `@id` for the `nameInDependentBaseResolvedByUnqualifiedLookup` query
    "cpp/misra/name-in-dependent-base-resolved-by-unqualified-lookup" and
  ruleId = "RULE-6-4-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `objectAccessedBeforeLifetimeMisra` query
    ImportMisra23Package::objectAccessedBeforeLifetimeMisraQuery() and
  queryId =
    // `@id` for the `objectAccessedBeforeLifetimeMisra` query
    "cpp/misra/object-accessed-before-lifetime-misra" and
  ruleId = "RULE-6-8-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `objectAccessedAfterLifetimeMisra` query
    ImportMisra23Package::objectAccessedAfterLifetimeMisraQuery() and
  queryId =
    // `@id` for the `objectAccessedAfterLifetimeMisra` query
    "cpp/misra/object-accessed-after-lifetime-misra" and
  ruleId = "RULE-6-8-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `mustNotReturnReferenceToLocalAutomaticVariable` query
    ImportMisra23Package::mustNotReturnReferenceToLocalAutomaticVariableQuery() and
  queryId =
    // `@id` for the `mustNotReturnReferenceToLocalAutomaticVariable` query
    "cpp/misra/must-not-return-reference-to-local-automatic-variable" and
  ruleId = "RULE-6-8-2" and
  category = "mandatory"
  or
  query =
    // `Query` instance for the `nullptrNotTheOnlyFormOfTheNullPointerConstant` query
    ImportMisra23Package::nullptrNotTheOnlyFormOfTheNullPointerConstantQuery() and
  queryId =
    // `@id` for the `nullptrNotTheOnlyFormOfTheNullPointerConstant` query
    "cpp/misra/nullptr-not-the-only-form-of-the-null-pointer-constant" and
  ruleId = "RULE-7-11-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `arrayPassedAsFunctionArgumentDecayToAPointer` query
    ImportMisra23Package::arrayPassedAsFunctionArgumentDecayToAPointerQuery() and
  queryId =
    // `@id` for the `arrayPassedAsFunctionArgumentDecayToAPointer` query
    "cpp/misra/array-passed-as-function-argument-decay-to-a-pointer" and
  ruleId = "RULE-7-11-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `resultOfAnAssignmentOperatorShouldNotBeUsed` query
    ImportMisra23Package::resultOfAnAssignmentOperatorShouldNotBeUsedQuery() and
  queryId =
    // `@id` for the `resultOfAnAssignmentOperatorShouldNotBeUsed` query
    "cpp/misra/result-of-an-assignment-operator-should-not-be-used" and
  ruleId = "RULE-8-18-2" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `commaOperatorShouldNotBeUsed` query
    ImportMisra23Package::commaOperatorShouldNotBeUsedQuery() and
  queryId =
    // `@id` for the `commaOperatorShouldNotBeUsed` query
    "cpp/misra/comma-operator-should-not-be-used" and
  ruleId = "RULE-8-19-1" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `functionsCallThemselvesEitherDirectlyOrIndirectly` query
    ImportMisra23Package::functionsCallThemselvesEitherDirectlyOrIndirectlyQuery() and
  queryId =
    // `@id` for the `functionsCallThemselvesEitherDirectlyOrIndirectly` query
    "cpp/misra/functions-call-themselves-either-directly-or-indirectly" and
  ruleId = "RULE-8-2-10" and
  category = "required"
  or
  query =
    // `Query` instance for the `castRemovesConstOrVolatileFromPointerOrReference` query
    ImportMisra23Package::castRemovesConstOrVolatileFromPointerOrReferenceQuery() and
  queryId =
    // `@id` for the `castRemovesConstOrVolatileFromPointerOrReference` query
    "cpp/misra/cast-removes-const-or-volatile-from-pointer-or-reference" and
  ruleId = "RULE-8-2-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `castsBetweenAPointerToFunctionAndAnyOtherType` query
    ImportMisra23Package::castsBetweenAPointerToFunctionAndAnyOtherTypeQuery() and
  queryId =
    // `@id` for the `castsBetweenAPointerToFunctionAndAnyOtherType` query
    "cpp/misra/casts-between-a-pointer-to-function-and-any-other-type" and
  ruleId = "RULE-8-2-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `reinterpretCastShallNotBeUsed` query
    ImportMisra23Package::reinterpretCastShallNotBeUsedQuery() and
  queryId =
    // `@id` for the `reinterpretCastShallNotBeUsed` query
    "cpp/misra/reinterpret-cast-shall-not-be-used" and
  ruleId = "RULE-8-2-5" and
  category = "required"
  or
  query =
    // `Query` instance for the `unsignedOperationWithConstantOperandsShouldNotWrap` query
    ImportMisra23Package::unsignedOperationWithConstantOperandsShouldNotWrapQuery() and
  queryId =
    // `@id` for the `unsignedOperationWithConstantOperandsShouldNotWrap` query
    "cpp/misra/unsigned-operation-with-constant-operands-should-not-wrap" and
  ruleId = "RULE-8-20-1" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `builtInOperatorAppliedToUnsignedExpression` query
    ImportMisra23Package::builtInOperatorAppliedToUnsignedExpressionQuery() and
  queryId =
    // `@id` for the `builtInOperatorAppliedToUnsignedExpression` query
    "cpp/misra/built-in-operator-applied-to-unsigned-expression" and
  ruleId = "RULE-8-3-1" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `bodyOfIterationOrSelectionStatementNotCompound` query
    ImportMisra23Package::bodyOfIterationOrSelectionStatementNotCompoundQuery() and
  queryId =
    // `@id` for the `bodyOfIterationOrSelectionStatementNotCompound` query
    "cpp/misra/body-of-iteration-or-selection-statement-not-compound" and
  ruleId = "RULE-9-3-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `ifElseIfEndCondition` query
    ImportMisra23Package::ifElseIfEndConditionQuery() and
  queryId =
    // `@id` for the `ifElseIfEndCondition` query
    "cpp/misra/if-else-if-end-condition" and
  ruleId = "RULE-9-4-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `gotoStatementShouldNotBeUsed` query
    ImportMisra23Package::gotoStatementShouldNotBeUsedQuery() and
  queryId =
    // `@id` for the `gotoStatementShouldNotBeUsed` query
    "cpp/misra/goto-statement-should-not-be-used" and
  ruleId = "RULE-9-6-1" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `gotoShallReferenceALabelInSurroundingBlock` query
    ImportMisra23Package::gotoShallReferenceALabelInSurroundingBlockQuery() and
  queryId =
    // `@id` for the `gotoShallReferenceALabelInSurroundingBlock` query
    "cpp/misra/goto-shall-reference-a-label-in-surrounding-block" and
  ruleId = "RULE-9-6-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `gotoShallJumpToLabelDeclaredLaterInTheFunction` query
    ImportMisra23Package::gotoShallJumpToLabelDeclaredLaterInTheFunctionQuery() and
  queryId =
    // `@id` for the `gotoShallJumpToLabelDeclaredLaterInTheFunction` query
    "cpp/misra/goto-shall-jump-to-label-declared-later-in-the-function" and
  ruleId = "RULE-9-6-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `functionDeclaredWithTheNoreturnAttributeReturn` query
    ImportMisra23Package::functionDeclaredWithTheNoreturnAttributeReturnQuery() and
  queryId =
    // `@id` for the `functionDeclaredWithTheNoreturnAttributeReturn` query
    "cpp/misra/function-declared-with-the-noreturn-attribute-return" and
  ruleId = "RULE-9-6-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `nonVoidFunctionShallReturnAValueOnAllPaths` query
    ImportMisra23Package::nonVoidFunctionShallReturnAValueOnAllPathsQuery() and
  queryId =
    // `@id` for the `nonVoidFunctionShallReturnAValueOnAllPaths` query
    "cpp/misra/non-void-function-shall-return-a-value-on-all-paths" and
  ruleId = "RULE-9-6-5" and
  category = "required"
}

module ImportMisra23Package {
  Query userCopyAndMoveAssignmentShallHandleSelfAssignmentQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `userCopyAndMoveAssignmentShallHandleSelfAssignment` query
      TQueryCPP(TImportMisra23PackageQuery(TUserCopyAndMoveAssignmentShallHandleSelfAssignmentQuery()))
  }

  Query sectionsOfCodeShouldNotBeCommentedOutQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `sectionsOfCodeShouldNotBeCommentedOut` query
      TQueryCPP(TImportMisra23PackageQuery(TSectionsOfCodeShouldNotBeCommentedOutQuery()))
  }

  Query declarationShouldNotDeclareMoreThanOneVariableQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `declarationShouldNotDeclareMoreThanOneVariable` query
      TQueryCPP(TImportMisra23PackageQuery(TDeclarationShouldNotDeclareMoreThanOneVariableQuery()))
  }

  Query enumerationNotDefinedWithAnExplicitUnderlyingTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `enumerationNotDefinedWithAnExplicitUnderlyingType` query
      TQueryCPP(TImportMisra23PackageQuery(TEnumerationNotDefinedWithAnExplicitUnderlyingTypeQuery()))
  }

  Query asmDeclarationShallNotBeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `asmDeclarationShallNotBeUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TAsmDeclarationShallNotBeUsedQuery()))
  }

  Query declarationOfAnObjectIndirectionsLevelQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `declarationOfAnObjectIndirectionsLevel` query
      TQueryCPP(TImportMisra23PackageQuery(TDeclarationOfAnObjectIndirectionsLevelQuery()))
  }

  Query valueOfAnEnumerationConstantNotUniqueQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `valueOfAnEnumerationConstantNotUnique` query
      TQueryCPP(TImportMisra23PackageQuery(TValueOfAnEnumerationConstantNotUniqueQuery()))
  }

  Query bitFieldShallHaveAnAppropriateTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `bitFieldShallHaveAnAppropriateType` query
      TQueryCPP(TImportMisra23PackageQuery(TBitFieldShallHaveAnAppropriateTypeQuery()))
  }

  Query signedIntegerBitFieldHaveALengthOfOneBitQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `signedIntegerBitFieldHaveALengthOfOneBit` query
      TQueryCPP(TImportMisra23PackageQuery(TSignedIntegerBitFieldHaveALengthOfOneBitQuery()))
  }

  Query virtualAndNonVirtualBaseClassInHierarchyQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `virtualAndNonVirtualBaseClassInHierarchy` query
      TQueryCPP(TImportMisra23PackageQuery(TVirtualAndNonVirtualBaseClassInHierarchyQuery()))
  }

  Query differentDefaultArgsInOverridingVirtualFunctionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `differentDefaultArgsInOverridingVirtualFunction` query
      TQueryCPP(TImportMisra23PackageQuery(TDifferentDefaultArgsInOverridingVirtualFunctionQuery()))
  }

  Query declarationsOrOverridesParamsAreUnnamedOrIdenticalQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `declarationsOrOverridesParamsAreUnnamedOrIdentical` query
      TQueryCPP(TImportMisra23PackageQuery(TDeclarationsOrOverridesParamsAreUnnamedOrIdenticalQuery()))
  }

  Query comparisonOfVirtualPointerOnlyBeWithNullptrQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `comparisonOfVirtualPointerOnlyBeWithNullptr` query
      TQueryCPP(TImportMisra23PackageQuery(TComparisonOfVirtualPointerOnlyBeWithNullptrQuery()))
  }

  Query dynamicTypeUsedWithinConstructorOrDestructorQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `dynamicTypeUsedWithinConstructorOrDestructor` query
      TQueryCPP(TImportMisra23PackageQuery(TDynamicTypeUsedWithinConstructorOrDestructorQuery()))
  }

  Query constructorsShouldInitializeAllBaseClassesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `constructorsShouldInitializeAllBaseClasses` query
      TQueryCPP(TImportMisra23PackageQuery(TConstructorsShouldInitializeAllBaseClassesQuery()))
  }

  Query initializerListConstructorIsTheOnlyConstructorQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `initializerListConstructorIsTheOnlyConstructor` query
      TQueryCPP(TImportMisra23PackageQuery(TInitializerListConstructorIsTheOnlyConstructorQuery()))
  }

  Query addressOfOperatorOverloadedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `addressOfOperatorOverloaded` query
      TQueryCPP(TImportMisra23PackageQuery(TAddressOfOperatorOverloadedQuery()))
  }

  Query functionTemplatesExplicitlySpecializedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionTemplatesExplicitlySpecialized` query
      TQueryCPP(TImportMisra23PackageQuery(TFunctionTemplatesExplicitlySpecializedQuery()))
  }

  Query exceptionObjectHavePointerTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `exceptionObjectHavePointerType` query
      TQueryCPP(TImportMisra23PackageQuery(TExceptionObjectHavePointerTypeQuery()))
  }

  Query emptyThrowShallOnlyOccurWithinACatchHandlerQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `emptyThrowShallOnlyOccurWithinACatchHandler` query
      TQueryCPP(TImportMisra23PackageQuery(TEmptyThrowShallOnlyOccurWithinACatchHandlerQuery()))
  }

  Query handlersReferToNonStaticMembersFromTheirClassQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `handlersReferToNonStaticMembersFromTheirClass` query
      TQueryCPP(TImportMisra23PackageQuery(THandlersReferToNonStaticMembersFromTheirClassQuery()))
  }

  Query noexceptFunctionShouldNotPropagateAnExceptionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `noexceptFunctionShouldNotPropagateAnException` query
      TQueryCPP(TImportMisra23PackageQuery(TNoexceptFunctionShouldNotPropagateAnExceptionQuery()))
  }

  Query functionLikeMacrosDefinedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionLikeMacrosDefined` query
      TQueryCPP(TImportMisra23PackageQuery(TFunctionLikeMacrosDefinedQuery()))
  }

  Query includeDirectivesPrecededByPreprocessorDirectivesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `includeDirectivesPrecededByPreprocessorDirectives` query
      TQueryCPP(TImportMisra23PackageQuery(TIncludeDirectivesPrecededByPreprocessorDirectivesQuery()))
  }

  Query identifiersUsedInTheControllingExpressionOfQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `identifiersUsedInTheControllingExpressionOf` query
      TQueryCPP(TImportMisra23PackageQuery(TIdentifiersUsedInTheControllingExpressionOfQuery()))
  }

  Query charsThatShouldNotOccurInHeaderFileNameQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `charsThatShouldNotOccurInHeaderFileName` query
      TQueryCPP(TImportMisra23PackageQuery(TCharsThatShouldNotOccurInHeaderFileNameQuery()))
  }

  Query andPreprocessorOperatorsShouldNotBeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `andPreprocessorOperatorsShouldNotBeUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TAndPreprocessorOperatorsShouldNotBeUsedQuery()))
  }

  Query macroParameterFollowingAHashOperatorQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `macroParameterFollowingAHashOperator` query
      TQueryCPP(TImportMisra23PackageQuery(TMacroParameterFollowingAHashOperatorQuery()))
  }

  Query argumentToAMixedUseMacroShoulNotNeedExpansionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `argumentToAMixedUseMacroShoulNotNeedExpansion` query
      TQueryCPP(TImportMisra23PackageQuery(TArgumentToAMixedUseMacroShoulNotNeedExpansionQuery()))
  }

  Query tokensThatLookLikeDirectivesInAMacroArgumentQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `tokensThatLookLikeDirectivesInAMacroArgument` query
      TQueryCPP(TImportMisra23PackageQuery(TTokensThatLookLikeDirectivesInAMacroArgumentQuery()))
  }

  Query facilitiesProvidedByCsignalUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `facilitiesProvidedByCsignalUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TFacilitiesProvidedByCsignalUsedQuery()))
  }

  Query atofAtoiAtolAndAtollFromCstdlibUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `atofAtoiAtolAndAtollFromCstdlibUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TAtofAtoiAtolAndAtollFromCstdlibUsedQuery()))
  }

  Query macroOffsetShouldNotBeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `macroOffsetShouldNotBeUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TMacroOffsetShouldNotBeUsedQuery()))
  }

  Query defineBothSizedAndUnsizedVersionOfAGlobalOperatorQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `defineBothSizedAndUnsizedVersionOfAGlobalOperator` query
      TQueryCPP(TImportMisra23PackageQuery(TDefineBothSizedAndUnsizedVersionOfAGlobalOperatorQuery()))
  }

  Query pointerToAnIncompleteClassTypeDeletedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `pointerToAnIncompleteClassTypeDeleted` query
      TQueryCPP(TImportMisra23PackageQuery(TPointerToAnIncompleteClassTypeDeletedQuery()))
  }

  Query pointersReturnedByLocaleFunctionsMustBeUsedAsConstQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `pointersReturnedByLocaleFunctionsMustBeUsedAsConst` query
      TQueryCPP(TImportMisra23PackageQuery(TPointersReturnedByLocaleFunctionsMustBeUsedAsConstQuery()))
  }

  Query callToSetlocaleInvalidatesOldPointersMisraQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `callToSetlocaleInvalidatesOldPointersMisra` query
      TQueryCPP(TImportMisra23PackageQuery(TCallToSetlocaleInvalidatesOldPointersMisraQuery()))
  }

  Query callToSetlocaleInvalidatesOldPointersWarnMisraQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `callToSetlocaleInvalidatesOldPointersWarnMisra` query
      TQueryCPP(TImportMisra23PackageQuery(TCallToSetlocaleInvalidatesOldPointersWarnMisraQuery()))
  }

  Query vectorShouldNotBeSpecializedWithBoolQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `vectorShouldNotBeSpecializedWithBool` query
      TQueryCPP(TImportMisra23PackageQuery(TVectorShouldNotBeSpecializedWithBoolQuery()))
  }

  Query forwardingReferencesAndForwardNotUsedTogetherQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `forwardingReferencesAndForwardNotUsedTogether` query
      TQueryCPP(TImportMisra23PackageQuery(TForwardingReferencesAndForwardNotUsedTogetherQuery()))
  }

  Query objectUsedWhileInPotentiallyMovedFromStateQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `objectUsedWhileInPotentiallyMovedFromState` query
      TQueryCPP(TImportMisra23PackageQuery(TObjectUsedWhileInPotentiallyMovedFromStateQuery()))
  }

  Query cLibraryInputoutputFunctionsUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `cLibraryInputoutputFunctionsUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TCLibraryInputoutputFunctionsUsedQuery()))
  }

  Query readsAndWritesOnStreamNotSeparatedByPositioningQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `readsAndWritesOnStreamNotSeparatedByPositioning` query
      TQueryCPP(TImportMisra23PackageQuery(TReadsAndWritesOnStreamNotSeparatedByPositioningQuery()))
  }

  Query operationsOnMemoryNotSequencedAppropriatelyQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `operationsOnMemoryNotSequencedAppropriately` query
      TQueryCPP(TImportMisra23PackageQuery(TOperationsOnMemoryNotSequencedAppropriatelyQuery()))
  }

  Query characterOnlyInEscapeSequenceOrUniversalCharNameQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `characterOnlyInEscapeSequenceOrUniversalCharName` query
      TQueryCPP(TImportMisra23PackageQuery(TCharacterOnlyInEscapeSequenceOrUniversalCharNameQuery()))
  }

  Query escapeSequencesAndUniversalCharNamesNotTerminatedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `escapeSequencesAndUniversalCharNamesNotTerminated` query
      TQueryCPP(TImportMisra23PackageQuery(TEscapeSequencesAndUniversalCharNamesNotTerminatedQuery()))
  }

  Query octalConstantsUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `octalConstantsUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TOctalConstantsUsedQuery()))
  }

  Query unsignedIntegerLiteralsNotAppropriatelySuffixedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `unsignedIntegerLiteralsNotAppropriatelySuffixed` query
      TQueryCPP(TImportMisra23PackageQuery(TUnsignedIntegerLiteralsNotAppropriatelySuffixedQuery()))
  }

  Query lowercaseLUsedAsFirstCharacterInLiteralSuffixQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `lowercaseLUsedAsFirstCharacterInLiteralSuffix` query
      TQueryCPP(TImportMisra23PackageQuery(TLowercaseLUsedAsFirstCharacterInLiteralSuffixQuery()))
  }

  Query characterSequenceUsedWithinACStyleCommentQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `characterSequenceUsedWithinACStyleComment` query
      TQueryCPP(TImportMisra23PackageQuery(TCharacterSequenceUsedWithinACStyleCommentQuery()))
  }

  Query lineSplicingUsedInCommentsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `lineSplicingUsedInComments` query
      TQueryCPP(TImportMisra23PackageQuery(TLineSplicingUsedInCommentsQuery()))
  }

  Query globalDeclarationsOnlyMainNamespaceOrExternCQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `globalDeclarationsOnlyMainNamespaceOrExternC` query
      TQueryCPP(TImportMisra23PackageQuery(TGlobalDeclarationsOnlyMainNamespaceOrExternCQuery()))
  }

  Query mainUsedOnlyForTheGlobalFunctionMainQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `mainUsedOnlyForTheGlobalFunctionMain` query
      TQueryCPP(TImportMisra23PackageQuery(TMainUsedOnlyForTheGlobalFunctionMainQuery()))
  }

  Query oneDefinitionRuleViolatedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `oneDefinitionRuleViolated` query
      TQueryCPP(TImportMisra23PackageQuery(TOneDefinitionRuleViolatedQuery()))
  }

  Query variableDeclaredInInnerScopeHidesOuterScopeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `variableDeclaredInInnerScopeHidesOuterScope` query
      TQueryCPP(TImportMisra23PackageQuery(TVariableDeclaredInInnerScopeHidesOuterScopeQuery()))
  }

  Query derivedClasseConcealFunctionInheritedFromTheBaseQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `derivedClasseConcealFunctionInheritedFromTheBase` query
      TQueryCPP(TImportMisra23PackageQuery(TDerivedClasseConcealFunctionInheritedFromTheBaseQuery()))
  }

  Query nameInDependentBaseResolvedByUnqualifiedLookupQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nameInDependentBaseResolvedByUnqualifiedLookup` query
      TQueryCPP(TImportMisra23PackageQuery(TNameInDependentBaseResolvedByUnqualifiedLookupQuery()))
  }

  Query objectAccessedBeforeLifetimeMisraQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `objectAccessedBeforeLifetimeMisra` query
      TQueryCPP(TImportMisra23PackageQuery(TObjectAccessedBeforeLifetimeMisraQuery()))
  }

  Query objectAccessedAfterLifetimeMisraQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `objectAccessedAfterLifetimeMisra` query
      TQueryCPP(TImportMisra23PackageQuery(TObjectAccessedAfterLifetimeMisraQuery()))
  }

  Query mustNotReturnReferenceToLocalAutomaticVariableQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `mustNotReturnReferenceToLocalAutomaticVariable` query
      TQueryCPP(TImportMisra23PackageQuery(TMustNotReturnReferenceToLocalAutomaticVariableQuery()))
  }

  Query nullptrNotTheOnlyFormOfTheNullPointerConstantQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nullptrNotTheOnlyFormOfTheNullPointerConstant` query
      TQueryCPP(TImportMisra23PackageQuery(TNullptrNotTheOnlyFormOfTheNullPointerConstantQuery()))
  }

  Query arrayPassedAsFunctionArgumentDecayToAPointerQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `arrayPassedAsFunctionArgumentDecayToAPointer` query
      TQueryCPP(TImportMisra23PackageQuery(TArrayPassedAsFunctionArgumentDecayToAPointerQuery()))
  }

  Query resultOfAnAssignmentOperatorShouldNotBeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `resultOfAnAssignmentOperatorShouldNotBeUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TResultOfAnAssignmentOperatorShouldNotBeUsedQuery()))
  }

  Query commaOperatorShouldNotBeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `commaOperatorShouldNotBeUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TCommaOperatorShouldNotBeUsedQuery()))
  }

  Query functionsCallThemselvesEitherDirectlyOrIndirectlyQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionsCallThemselvesEitherDirectlyOrIndirectly` query
      TQueryCPP(TImportMisra23PackageQuery(TFunctionsCallThemselvesEitherDirectlyOrIndirectlyQuery()))
  }

  Query castRemovesConstOrVolatileFromPointerOrReferenceQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `castRemovesConstOrVolatileFromPointerOrReference` query
      TQueryCPP(TImportMisra23PackageQuery(TCastRemovesConstOrVolatileFromPointerOrReferenceQuery()))
  }

  Query castsBetweenAPointerToFunctionAndAnyOtherTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `castsBetweenAPointerToFunctionAndAnyOtherType` query
      TQueryCPP(TImportMisra23PackageQuery(TCastsBetweenAPointerToFunctionAndAnyOtherTypeQuery()))
  }

  Query reinterpretCastShallNotBeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `reinterpretCastShallNotBeUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TReinterpretCastShallNotBeUsedQuery()))
  }

  Query unsignedOperationWithConstantOperandsShouldNotWrapQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `unsignedOperationWithConstantOperandsShouldNotWrap` query
      TQueryCPP(TImportMisra23PackageQuery(TUnsignedOperationWithConstantOperandsShouldNotWrapQuery()))
  }

  Query builtInOperatorAppliedToUnsignedExpressionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `builtInOperatorAppliedToUnsignedExpression` query
      TQueryCPP(TImportMisra23PackageQuery(TBuiltInOperatorAppliedToUnsignedExpressionQuery()))
  }

  Query bodyOfIterationOrSelectionStatementNotCompoundQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `bodyOfIterationOrSelectionStatementNotCompound` query
      TQueryCPP(TImportMisra23PackageQuery(TBodyOfIterationOrSelectionStatementNotCompoundQuery()))
  }

  Query ifElseIfEndConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `ifElseIfEndCondition` query
      TQueryCPP(TImportMisra23PackageQuery(TIfElseIfEndConditionQuery()))
  }

  Query gotoStatementShouldNotBeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `gotoStatementShouldNotBeUsed` query
      TQueryCPP(TImportMisra23PackageQuery(TGotoStatementShouldNotBeUsedQuery()))
  }

  Query gotoShallReferenceALabelInSurroundingBlockQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `gotoShallReferenceALabelInSurroundingBlock` query
      TQueryCPP(TImportMisra23PackageQuery(TGotoShallReferenceALabelInSurroundingBlockQuery()))
  }

  Query gotoShallJumpToLabelDeclaredLaterInTheFunctionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `gotoShallJumpToLabelDeclaredLaterInTheFunction` query
      TQueryCPP(TImportMisra23PackageQuery(TGotoShallJumpToLabelDeclaredLaterInTheFunctionQuery()))
  }

  Query functionDeclaredWithTheNoreturnAttributeReturnQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionDeclaredWithTheNoreturnAttributeReturn` query
      TQueryCPP(TImportMisra23PackageQuery(TFunctionDeclaredWithTheNoreturnAttributeReturnQuery()))
  }

  Query nonVoidFunctionShallReturnAValueOnAllPathsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nonVoidFunctionShallReturnAValueOnAllPaths` query
      TQueryCPP(TImportMisra23PackageQuery(TNonVoidFunctionShallReturnAValueOnAllPathsQuery()))
  }
}
