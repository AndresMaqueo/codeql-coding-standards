//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype Statements5Query =
  TControllingExpInvariantConditionQuery() or
  TFunctionReturnConditionQuery() or
  TNonVoidFunctionReturnConditionQuery()

predicate isStatements5QueryMetadata(Query query, string queryId, string ruleId, string category) {
  query =
    // `Query` instance for the `controllingExpInvariantCondition` query
    Statements5Package::controllingExpInvariantConditionQuery() and
  queryId =
    // `@id` for the `controllingExpInvariantCondition` query
    "c/misra/controlling-exp-invariant-condition" and
  ruleId = "RULE-14-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `functionReturnCondition` query
    Statements5Package::functionReturnConditionQuery() and
  queryId =
    // `@id` for the `functionReturnCondition` query
    "c/misra/function-return-condition" and
  ruleId = "RULE-15-5" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `nonVoidFunctionReturnCondition` query
    Statements5Package::nonVoidFunctionReturnConditionQuery() and
  queryId =
    // `@id` for the `nonVoidFunctionReturnCondition` query
    "c/misra/non-void-function-return-condition" and
  ruleId = "RULE-17-4" and
  category = "mandatory"
}

module Statements5Package {
  Query controllingExpInvariantConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `controllingExpInvariantCondition` query
      TQueryC(TStatements5PackageQuery(TControllingExpInvariantConditionQuery()))
  }

  Query functionReturnConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionReturnCondition` query
      TQueryC(TStatements5PackageQuery(TFunctionReturnConditionQuery()))
  }

  Query nonVoidFunctionReturnConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nonVoidFunctionReturnCondition` query
      TQueryC(TStatements5PackageQuery(TNonVoidFunctionReturnConditionQuery()))
  }
}
